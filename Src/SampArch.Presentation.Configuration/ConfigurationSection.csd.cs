//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.239
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SampArch.Presentation.Configuration
{
    
    
    /// <summary>
    /// A collection of DefaultKeyValue instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::SampArch.Presentation.Configuration.DefaultKeyValue), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate, AddItemName=global::SampArch.Presentation.Configuration.AppKeys.DefaultKeyValuePropertyName)]
    public partial class AppKeys : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::SampArch.Presentation.Configuration.DefaultKeyValue"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        internal const string DefaultKeyValuePropertyName = "appKeys";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        protected override string ElementName
        {
            get
            {
                return global::SampArch.Presentation.Configuration.AppKeys.DefaultKeyValuePropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::SampArch.Presentation.Configuration.AppKeys.DefaultKeyValuePropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::SampArch.Presentation.Configuration.DefaultKeyValue)(element)).Key;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::SampArch.Presentation.Configuration.DefaultKeyValue"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::SampArch.Presentation.Configuration.DefaultKeyValue"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::SampArch.Presentation.Configuration.DefaultKeyValue();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::SampArch.Presentation.Configuration.DefaultKeyValue"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::SampArch.Presentation.Configuration.DefaultKeyValue"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        public global::SampArch.Presentation.Configuration.DefaultKeyValue this[int index]
        {
            get
            {
                return ((global::SampArch.Presentation.Configuration.DefaultKeyValue)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::SampArch.Presentation.Configuration.DefaultKeyValue"/> with the specified key.
        /// </summary>
        /// <param name="key">The key of the <see cref="global::SampArch.Presentation.Configuration.DefaultKeyValue"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        public global::SampArch.Presentation.Configuration.DefaultKeyValue this[object key]
        {
            get
            {
                return ((global::SampArch.Presentation.Configuration.DefaultKeyValue)(base.BaseGet(key)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::SampArch.Presentation.Configuration.DefaultKeyValue"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="appKeys">The <see cref="global::SampArch.Presentation.Configuration.DefaultKeyValue"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        public void Add(global::SampArch.Presentation.Configuration.DefaultKeyValue appKeys)
        {
            base.BaseAdd(appKeys);
        }
        #endregion
        
        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::SampArch.Presentation.Configuration.DefaultKeyValue"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="appKeys">The <see cref="global::SampArch.Presentation.Configuration.DefaultKeyValue"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        public void Remove(global::SampArch.Presentation.Configuration.DefaultKeyValue appKeys)
        {
            base.BaseRemove(this.GetElementKey(appKeys));
        }
        #endregion
        
        #region GetItem
        /// <summary>
        /// Gets the <see cref="global::SampArch.Presentation.Configuration.DefaultKeyValue"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::SampArch.Presentation.Configuration.DefaultKeyValue"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        public global::SampArch.Presentation.Configuration.DefaultKeyValue GetItemAt(int index)
        {
            return ((global::SampArch.Presentation.Configuration.DefaultKeyValue)(base.BaseGet(index)));
        }
        
        /// <summary>
        /// Gets the <see cref="global::SampArch.Presentation.Configuration.DefaultKeyValue"/> with the specified key.
        /// </summary>
        /// <param name="key">The key of the <see cref="global::SampArch.Presentation.Configuration.DefaultKeyValue"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        public global::SampArch.Presentation.Configuration.DefaultKeyValue GetItemByKey(string key)
        {
            return ((global::SampArch.Presentation.Configuration.DefaultKeyValue)(base.BaseGet(((object)(key)))));
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
namespace SampArch.Presentation.Configuration
{
    
    
    /// <summary>
    /// The SampArch.Core Configuration Section.
    /// </summary>
    public partial class SampArch.Core : global::System.Configuration.ConfigurationSection
    {
        
        #region Singleton Instance
        /// <summary>
        /// The XML name of the SampArch.Core Configuration Section.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        internal const string SampArch.CoreSectionName = "sampArch.Core";
        
        /// <summary>
        /// Gets the SampArch.Core instance.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        public static global::SampArch.Presentation.Configuration.SampArch.Core Instance
        {
            get
            {
                return ((global::SampArch.Presentation.Configuration.SampArch.Core)(global::System.Configuration.ConfigurationManager.GetSection(global::SampArch.Presentation.Configuration.SampArch.Core.SampArch.CoreSectionName)));
            }
        }
        #endregion
        
        #region Xmlns Property
        /// <summary>
        /// The XML name of the <see cref="Xmlns"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        internal const string XmlnsPropertyName = "xmlns";
        
        /// <summary>
        /// Gets the XML namespace of this Configuration Section.
        /// </summary>
        /// <remarks>
        /// This property makes sure that if the configuration file contains the XML namespace,
        /// the parser doesn't throw an exception because it encounters the unknown "xmlns" attribute.
        /// </remarks>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::SampArch.Presentation.Configuration.SampArch.Core.XmlnsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public string Xmlns
        {
            get
            {
                return ((string)(base[global::SampArch.Presentation.Configuration.SampArch.Core.XmlnsPropertyName]));
            }
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region appKeys Property
        /// <summary>
        /// The XML name of the <see cref="appKeys"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        internal const string appKeysPropertyName = "appKeys";
        
        /// <summary>
        /// Gets or sets the appKeys.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        [global::System.ComponentModel.DescriptionAttribute("The appKeys.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::SampArch.Presentation.Configuration.SampArch.Core.appKeysPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=true)]
        public global::SampArch.Presentation.Configuration.AppKeys appKeys
        {
            get
            {
                return ((global::SampArch.Presentation.Configuration.AppKeys)(base[global::SampArch.Presentation.Configuration.SampArch.Core.appKeysPropertyName]));
            }
            set
            {
                base[global::SampArch.Presentation.Configuration.SampArch.Core.appKeysPropertyName] = value;
            }
        }
        #endregion
        
        #region Custom Child Elements
        /// <summary>
        /// Gets a value indicating whether an unknown element is encountered during deserialization.
        /// </summary>
        /// <param name="elementName">The name of the unknown subelement.</param>
        /// <param name="reader">The <see cref="global::System.Xml.XmlReader"/> being used for deserialization.</param>
        /// <returns>
        /// <see langword="true"/> when an unknown element is encountered while deserializing; otherwise, <see langword="false"/>.
        /// </returns>
        /// <exception cref="global::System.Configuration.ConfigurationErrorsException">The element identified by <paramref name="elementName"/> is locked.- or -One or more of the element's attributes is locked.- or -<paramref name="elementName"/> is unrecognized, or the element has an unrecognized attribute.- or -The element has a Boolean attribute with an invalid value.- or -An attempt was made to deserialize a property more than once.- or -An attempt was made to deserialize a property that is not a valid member of the element.- or -The element cannot contain a CDATA or text element.</exception>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        protected override bool OnDeserializeUnrecognizedElement(string elementName, global::System.Xml.XmlReader reader)
        {
            // IMPORTANT NOTE: The code below does not build by default.
            // You have indicated that this configuration element has
            // custom child elements. Copy the commented code below to
            // a separate file and implement the method.
            // 
            // public partial class SampArch.Core
            // {
            //     
            //     private bool HandleUnrecognizedElement(string elementName, global::System.Xml.XmlReader reader)
            //     {
            //         throw new global::System.NotImplementedException();
            //     }
            // }
            // 
            return this.HandleUnrecognizedElement(elementName, reader);
        }
        #endregion
    }
}
namespace SampArch.Presentation.Configuration
{
    
    
    /// <summary>
    /// The DefaultKeyValue Configuration Element.
    /// </summary>
    public partial class DefaultKeyValue : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Key Property
        /// <summary>
        /// The XML name of the <see cref="Key"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        internal const string KeyPropertyName = "key";
        
        /// <summary>
        /// Gets or sets the Key.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Key.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::SampArch.Presentation.Configuration.DefaultKeyValue.KeyPropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public string Key
        {
            get
            {
                return ((string)(base[global::SampArch.Presentation.Configuration.DefaultKeyValue.KeyPropertyName]));
            }
            set
            {
                base[global::SampArch.Presentation.Configuration.DefaultKeyValue.KeyPropertyName] = value;
            }
        }
        #endregion
        
        #region Value Property
        /// <summary>
        /// The XML name of the <see cref="Value"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        internal const string ValuePropertyName = "value";
        
        /// <summary>
        /// Gets or sets the Value.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Value.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::SampArch.Presentation.Configuration.DefaultKeyValue.ValuePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public string Value
        {
            get
            {
                return ((string)(base[global::SampArch.Presentation.Configuration.DefaultKeyValue.ValuePropertyName]));
            }
            set
            {
                base[global::SampArch.Presentation.Configuration.DefaultKeyValue.ValuePropertyName] = value;
            }
        }
        #endregion
    }
}
namespace SampArch.Presentation.Configuration
{
    
    
    /// <summary>
    /// The SampArch.Blog Configuration Section.
    /// </summary>
    public partial class SampArch.Blog : global::System.Configuration.ConfigurationSection
    {
        
        #region Singleton Instance
        /// <summary>
        /// The XML name of the SampArch.Blog Configuration Section.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        internal const string SampArch.BlogSectionName = "sampArch.Blog";
        
        /// <summary>
        /// Gets the SampArch.Blog instance.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        public static global::SampArch.Presentation.Configuration.SampArch.Blog Instance
        {
            get
            {
                return ((global::SampArch.Presentation.Configuration.SampArch.Blog)(global::System.Configuration.ConfigurationManager.GetSection(global::SampArch.Presentation.Configuration.SampArch.Blog.SampArch.BlogSectionName)));
            }
        }
        #endregion
        
        #region Xmlns Property
        /// <summary>
        /// The XML name of the <see cref="Xmlns"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        internal const string XmlnsPropertyName = "xmlns";
        
        /// <summary>
        /// Gets the XML namespace of this Configuration Section.
        /// </summary>
        /// <remarks>
        /// This property makes sure that if the configuration file contains the XML namespace,
        /// the parser doesn't throw an exception because it encounters the unknown "xmlns" attribute.
        /// </remarks>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::SampArch.Presentation.Configuration.SampArch.Blog.XmlnsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public string Xmlns
        {
            get
            {
                return ((string)(base[global::SampArch.Presentation.Configuration.SampArch.Blog.XmlnsPropertyName]));
            }
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
namespace SampArch.Presentation.Configuration
{
    
    
    /// <summary>
    /// The SampArch.Ideas Configuration Section.
    /// </summary>
    public partial class SampArch.Ideas : global::System.Configuration.ConfigurationSection
    {
        
        #region Singleton Instance
        /// <summary>
        /// The XML name of the SampArch.Ideas Configuration Section.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        internal const string SampArch.IdeasSectionName = "sampArch.Ideas";
        
        /// <summary>
        /// Gets the SampArch.Ideas instance.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        public static global::SampArch.Presentation.Configuration.SampArch.Ideas Instance
        {
            get
            {
                return ((global::SampArch.Presentation.Configuration.SampArch.Ideas)(global::System.Configuration.ConfigurationManager.GetSection(global::SampArch.Presentation.Configuration.SampArch.Ideas.SampArch.IdeasSectionName)));
            }
        }
        #endregion
        
        #region Xmlns Property
        /// <summary>
        /// The XML name of the <see cref="Xmlns"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        internal const string XmlnsPropertyName = "xmlns";
        
        /// <summary>
        /// Gets the XML namespace of this Configuration Section.
        /// </summary>
        /// <remarks>
        /// This property makes sure that if the configuration file contains the XML namespace,
        /// the parser doesn't throw an exception because it encounters the unknown "xmlns" attribute.
        /// </remarks>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::SampArch.Presentation.Configuration.SampArch.Ideas.XmlnsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public string Xmlns
        {
            get
            {
                return ((string)(base[global::SampArch.Presentation.Configuration.SampArch.Ideas.XmlnsPropertyName]));
            }
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
